
buildscript {
    ext.cubaVersion = '6.6.2'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        maven {
            url 'https://repo.cuba-platform.com/content/groups/premium'
            credentials {
                username(rootProject.hasProperty('premiumRepoUser') ? rootProject['premiumRepoUser'] : System.getenv('CUBA_PREMIUM_USER'))
                password(rootProject.hasProperty('premiumRepoPass') ? rootProject['premiumRepoPass'] : System.getenv('CUBA_PREMIUM_PASSWORD'))
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':app-global')
def webThemesModule= project(':app-web-themes')
def coreModule = project(':app-core')
def guiModule = project(':app-gui')
def webModule = project(':app-web')


def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'ru.glavkniga.gklients'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/build/tomcat"
        port = 28080
    }
    ide {
        copyright = '''Copyright (c) ${today.year} ${project.name}''' // Copyright Notice for IDEA project
        classComment ='''/**
 * @author ${USER}
 */'''
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("com.haulmont.reports:reports-global:$cubaVersion")
    appComponent("com.haulmont.fts:fts-global:$cubaVersion")
}


def postgres = 'org.postgresql:postgresql:9.4-1201-jdbc41'

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')
    apply(plugin: 'checkstyle')
    apply(plugin: 'findbugs')
    apply(plugin: 'pmd')

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    dependencies {
        compile('com.google.guava:guava:22.0')
        compile('commons-net:commons-net:3.6')
        compile('commons-io:commons-io:2.5')
        compile('org.apache.tika:tika-core:1.15')
        compile('org.apache.tika:tika-parsers:1.15')
        testCompile('junit:junit:4.12')
        testCompile('org.testng:testng:6.9.10')
        testCompile('org.hamcrest:hamcrest-all:1.3')
        testCompile('org.mockito:mockito-all:1.10.19')
        testCompile('org.powermock:powermock-module-junit4:1.6.5')
        testCompile('org.powermock:powermock-api-mockito:1.6.5')
        testCompile('org.eclipse.jetty:jetty-servlet:9.2.15.v20160210')
        testCompile('org.eclipse.jetty:jetty-server:9.2.15.v20160210')
        testCompile('org.mockftpserver:MockFtpServer:2.7.1')
        testCompile('com.icegreen:greenmail:1.5.5')
        testCompile('commons-fileupload:commons-fileupload:1.3.2')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    findbugs {
        sourceSets = []
        toolVersion = '3.0.1'
        effort = "max"
        ignoreFailures=true
        findbugsTest.enabled=true
        reportsDir = file("$project.buildDir/reports/findbugs")
        omitVisitors = ["FindNonShortCircuit"]
        includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
        excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
    }

    pmd {
        sourceSets = []
        ignoreFailures = true
        pmdTest.enabled=true
        reportsDir = file("$project.buildDir/reports/pmd")
        ruleSets = [
                'java-basic',
                'java-braces',
                'java-clone',
                'java-codesize',
                'java-comments',
                'java-controversial',
                'java-coupling',
                'java-design',
                'java-empty',
                'java-finalizers',
                'java-imports',
                'java-optimizations',
                'java-strictexception',
                'java-strings',
                'java-typeresolution',
                'java-unnecessary',
                'java-unusedcode'
        ]
    }

    checkstyle {
        sourceSets = []
        ignoreFailures = true
        showViolations = false
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile("$rootProject.projectDir/config/findbugs/style/fancy-hist.xsl")
        }
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }

    tasks.withType(Checkstyle) {
        configFile  file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
        source 'src'
        include '**/*.java'
        exclude '**/gen/**'
        reports {
            xml.enabled false
            html.enabled true
        }
    }

    // ./gradlew clean findBugsMain pmdMain checkstyleMain
}

configure(globalModule) {
    dependencies {

    }

    task enhance(type: CubaEnhancing)
    
}
configure(webThemesModule) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    appModuleType = 'web-themes'

    buildDir = file('../build/scss-themes')

    sourceSets {
        main {
            java {
                srcDir '.'
            }
            resources {
                srcDir '.'
            }
        }
    }
}


configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(postgres)
        testRuntime(postgres)
    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/app-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'app-core'
        appJars('app-global', 'app-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        dbmsVersion = 'null'
        host = 'localhost'
        dbName = 'gklients'
        dbUser = 'gklients'
        dbPassword = 'gklients'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        dbmsVersion = 'null'
        host = 'localhost'
        dbName = 'gklients'
        dbUser = 'gklients'
        dbPassword = 'gklients'
    }

    // Для создания тестовой базы выполнить в консоли ./gradlew createTestDb
    task createTestDb(dependsOn: assemble, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'testgk'
        dbUser = 'gklients'
        dbPassword = 'gklients'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        testCompile('org.jmockit:jmockit:1.15')

    }

    task deployConf(type: Copy) {
        from file('src')
        include "ru/glavkniga/gklients/**"
        into "$cuba.tomcat.dir/conf/app"
    }
}

configure(webModule) {
    configurations {
        webcontent
        themes
        
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)
        testCompile('org.jmockit:jmockit:1.15')
        themes("com.haulmont.cuba:cuba-web-themes:$cubaVersion")
        provided("com.haulmont.cuba:cuba-web-themes:$cubaVersion")

    }

    task webArchive(type: Zip) {
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "ru/glavkniga/gklients/**"
        into "$cuba.tomcat.dir/conf/app"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'app'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'app'
        appJars('app-global', 'app-gui', 'app-web')
    }
    task buildScssThemes(type: CubaWebScssThemeCreation)
    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)
    assemble.dependsOn buildScssThemes
}



task undeploy(type: Delete, dependsOn: ':app-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/app-core")
    delete("$cuba.tomcat.dir/webapps/app")

}

task restart(dependsOn: ['stop', ':app-core:deploy', ':app-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}